// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/budget.dart';
import 'models/category.dart';
import 'models/income.dart';
import 'models/savings_goal.dart';
import 'models/transation.dart';
import 'models/user_account.dart';
import 'models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 2297186340573820686),
      name: 'Budget',
      lastPropertyId: const obx_int.IdUid(4, 3230151813157672129),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6993974322688802483),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6475888291417149317),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7244105869403235865),
            name: 'startDate',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 3230151813157672129),
            name: 'endDate',
            type: 10,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7964190864489315676),
      name: 'Category',
      lastPropertyId: const obx_int.IdUid(4, 5508185164439067213),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3305941410157809931),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2986805932626621858),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 4054660821241551715),
            name: 'parentCategoryName',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5508185164439067213),
            name: 'type',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1772511145703233354),
      name: 'SavingsGoal',
      lastPropertyId: const obx_int.IdUid(6, 6315991339441395891),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2334908770962284159),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3218849499139032423),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8640456563234071899),
            name: 'targetAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8903753678552835519),
            name: 'currentAmount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3737339883188504856),
            name: 'deadline',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6315991339441395891),
            name: 'userModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(4, 6538606521901446520),
            relationTarget: 'UserModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 2048534005229563078),
      name: 'Transaction',
      lastPropertyId: const obx_int.IdUid(7, 9153565074284485557),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 8893538095543094193),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 486982642100940728),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 6426081972319739429),
            name: 'type',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 4393522714189242543),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3818755074945968143),
            name: 'description',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8633915094333052557),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(1, 2411216039996360920),
            relationTarget: 'Category'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 9153565074284485557),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(2, 5427833713551233148),
            relationTarget: 'UserAccount')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 4975339974841101634),
      name: 'UserAccount',
      lastPropertyId: const obx_int.IdUid(5, 3412091695287371128),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3166707898725982306),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4778318087740641106),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3572527589305731084),
            name: 'balance',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 8164777322921501914),
            name: 'currency',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3412091695287371128),
            name: 'userModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 7591601792923000898),
            relationTarget: 'UserModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'transactions', srcEntity: 'Transaction', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(6, 6852840012148429731),
      name: 'UserModel',
      lastPropertyId: const obx_int.IdUid(5, 6079690293616181351),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1506486312238062434),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8538947509443802601),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 174614565842203301),
            name: 'email',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7311381317264433742),
            name: 'profileImgUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6079690293616181351),
            name: 'budgetId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(3, 6821630257433165689),
            relationTarget: 'Budget')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'accounts', srcEntity: 'UserAccount', srcField: ''),
        obx_int.ModelBacklink(
            name: 'savingsGoals', srcEntity: 'SavingsGoal', srcField: ''),
        obx_int.ModelBacklink(
            name: 'incomes', srcEntity: 'Income', srcField: '')
      ]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 5753056031666294869),
      name: 'Income',
      lastPropertyId: const obx_int.IdUid(5, 4154360869331875501),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3067674789377820779),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2951802962725177237),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3816273736067776949),
            name: 'amount',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 750212567314759549),
            name: 'incomeRepitionType',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 4154360869331875501),
            name: 'userModelId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 6107867969220050927),
            relationTarget: 'UserModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 5753056031666294869),
      lastIndexId: const obx_int.IdUid(6, 6107867969220050927),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Budget: obx_int.EntityDefinition<Budget>(
        model: _entities[0],
        toOneRelations: (Budget object) => [],
        toManyRelations: (Budget object) => {},
        getId: (Budget object) => object.id,
        setId: (Budget object, int id) {
          object.id = id;
        },
        objectToFB: (Budget object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addInt64(2, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final startDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final endDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final object = Budget(
              id: idParam,
              amount: amountParam,
              startDate: startDateParam,
              endDate: endDateParam);

          return object;
        }),
    Category: obx_int.EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final parentCategoryNameOffset = object.parentCategoryName == null
              ? null
              : fbb.writeString(object.parentCategoryName!);
          final typeOffset = fbb.writeString(object.type);
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, parentCategoryNameOffset);
          fbb.addOffset(3, typeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final parentCategoryNameParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = Category(
              id: idParam,
              name: nameParam,
              parentCategoryName: parentCategoryNameParam,
              type: typeParam);

          return object;
        }),
    SavingsGoal: obx_int.EntityDefinition<SavingsGoal>(
        model: _entities[2],
        toOneRelations: (SavingsGoal object) => [object.userModel],
        toManyRelations: (SavingsGoal object) => {},
        getId: (SavingsGoal object) => object.id,
        setId: (SavingsGoal object, int id) {
          object.id = id;
        },
        objectToFB: (SavingsGoal object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.targetAmount);
          fbb.addFloat64(3, object.currentAmount);
          fbb.addInt64(4, object.deadline?.millisecondsSinceEpoch);
          fbb.addInt64(5, object.userModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final deadlineValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final targetAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final currentAmountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final deadlineParam = deadlineValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(deadlineValue);
          final object = SavingsGoal(
              id: idParam,
              name: nameParam,
              targetAmount: targetAmountParam,
              currentAmount: currentAmountParam,
              deadline: deadlineParam);
          object.userModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.userModel.attach(store);
          return object;
        }),
    Transaction: obx_int.EntityDefinition<Transaction>(
        model: _entities[3],
        toOneRelations: (Transaction object) =>
            [object.category, object.account],
        toManyRelations: (Transaction object) => {},
        getId: (Transaction object) => object.id,
        setId: (Transaction object, int id) {
          object.id = id;
        },
        objectToFB: (Transaction object, fb.Builder fbb) {
          final typeOffset = fbb.writeString(object.type);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.amount);
          fbb.addOffset(2, typeOffset);
          fbb.addInt64(3, object.date.millisecondsSinceEpoch);
          fbb.addOffset(4, descriptionOffset);
          fbb.addInt64(5, object.category.targetId);
          fbb.addInt64(6, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final typeParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final descriptionParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, '');
          final object = Transaction(
              id: idParam,
              amount: amountParam,
              type: typeParam,
              date: dateParam,
              description: descriptionParam);
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.category.attach(store);
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);
          object.account.attach(store);
          return object;
        }),
    UserAccount: obx_int.EntityDefinition<UserAccount>(
        model: _entities[4],
        toOneRelations: (UserAccount object) => [object.userModel],
        toManyRelations: (UserAccount object) => {
              obx_int.RelInfo<Transaction>.toOneBacklink(7, object.id,
                      (Transaction srcObject) => srcObject.account):
                  object.transactions
            },
        getId: (UserAccount object) => object.id,
        setId: (UserAccount object, int id) {
          object.id = id;
        },
        objectToFB: (UserAccount object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final currencyOffset = fbb.writeString(object.currency);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.balance);
          fbb.addOffset(3, currencyOffset);
          fbb.addInt64(4, object.userModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final balanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final currencyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = UserAccount(
              id: idParam,
              name: nameParam,
              balance: balanceParam,
              currency: currencyParam);
          object.userModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.userModel.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<UserAccount>(
              object.transactions,
              store,
              obx_int.RelInfo<Transaction>.toOneBacklink(
                  7, object.id, (Transaction srcObject) => srcObject.account));
          return object;
        }),
    UserModel: obx_int.EntityDefinition<UserModel>(
        model: _entities[5],
        toOneRelations: (UserModel object) => [object.budget],
        toManyRelations: (UserModel object) => {
              obx_int.RelInfo<UserAccount>.toOneBacklink(5, object.id,
                      (UserAccount srcObject) => srcObject.userModel):
                  object.accounts,
              obx_int.RelInfo<SavingsGoal>.toOneBacklink(6, object.id,
                      (SavingsGoal srcObject) => srcObject.userModel):
                  object.savingsGoals,
              obx_int.RelInfo<Income>.toOneBacklink(
                      5, object.id, (Income srcObject) => srcObject.userModel):
                  object.incomes
            },
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final profileImgUrlOffset = fbb.writeString(object.profileImgUrl);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, profileImgUrlOffset);
          fbb.addInt64(4, object.budget.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final profileImgUrlParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = UserModel(
              id: idParam,
              name: nameParam,
              email: emailParam,
              profileImgUrl: profileImgUrlParam);
          object.budget.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.budget.attach(store);
          obx_int.InternalToManyAccess.setRelInfo<UserModel>(
              object.accounts,
              store,
              obx_int.RelInfo<UserAccount>.toOneBacklink(5, object.id,
                  (UserAccount srcObject) => srcObject.userModel));
          obx_int.InternalToManyAccess.setRelInfo<UserModel>(
              object.savingsGoals,
              store,
              obx_int.RelInfo<SavingsGoal>.toOneBacklink(6, object.id,
                  (SavingsGoal srcObject) => srcObject.userModel));
          obx_int.InternalToManyAccess.setRelInfo<UserModel>(
              object.incomes,
              store,
              obx_int.RelInfo<Income>.toOneBacklink(
                  5, object.id, (Income srcObject) => srcObject.userModel));
          return object;
        }),
    Income: obx_int.EntityDefinition<Income>(
        model: _entities[6],
        toOneRelations: (Income object) => [object.userModel],
        toManyRelations: (Income object) => {},
        getId: (Income object) => object.id,
        setId: (Income object, int id) {
          object.id = id;
        },
        objectToFB: (Income object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final incomeRepitionTypeOffset =
              fbb.writeString(object.incomeRepitionType);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.amount);
          fbb.addOffset(3, incomeRepitionTypeOffset);
          fbb.addInt64(4, object.userModel.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final amountParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final incomeRepitionTypeParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = Income(
              id: idParam,
              name: nameParam,
              amount: amountParam,
              incomeRepitionType: incomeRepitionTypeParam);
          object.userModel.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.userModel.attach(store);
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Budget] entity fields to define ObjectBox queries.
class Budget_ {
  /// See [Budget.id].
  static final id =
      obx.QueryIntegerProperty<Budget>(_entities[0].properties[0]);

  /// See [Budget.amount].
  static final amount =
      obx.QueryDoubleProperty<Budget>(_entities[0].properties[1]);

  /// See [Budget.startDate].
  static final startDate =
      obx.QueryDateProperty<Budget>(_entities[0].properties[2]);

  /// See [Budget.endDate].
  static final endDate =
      obx.QueryDateProperty<Budget>(_entities[0].properties[3]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id =
      obx.QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// See [Category.name].
  static final name =
      obx.QueryStringProperty<Category>(_entities[1].properties[1]);

  /// See [Category.parentCategoryName].
  static final parentCategoryName =
      obx.QueryStringProperty<Category>(_entities[1].properties[2]);

  /// See [Category.type].
  static final type =
      obx.QueryStringProperty<Category>(_entities[1].properties[3]);
}

/// [SavingsGoal] entity fields to define ObjectBox queries.
class SavingsGoal_ {
  /// See [SavingsGoal.id].
  static final id =
      obx.QueryIntegerProperty<SavingsGoal>(_entities[2].properties[0]);

  /// See [SavingsGoal.name].
  static final name =
      obx.QueryStringProperty<SavingsGoal>(_entities[2].properties[1]);

  /// See [SavingsGoal.targetAmount].
  static final targetAmount =
      obx.QueryDoubleProperty<SavingsGoal>(_entities[2].properties[2]);

  /// See [SavingsGoal.currentAmount].
  static final currentAmount =
      obx.QueryDoubleProperty<SavingsGoal>(_entities[2].properties[3]);

  /// See [SavingsGoal.deadline].
  static final deadline =
      obx.QueryDateProperty<SavingsGoal>(_entities[2].properties[4]);

  /// See [SavingsGoal.userModel].
  static final userModel = obx.QueryRelationToOne<SavingsGoal, UserModel>(
      _entities[2].properties[5]);
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id =
      obx.QueryIntegerProperty<Transaction>(_entities[3].properties[0]);

  /// See [Transaction.amount].
  static final amount =
      obx.QueryDoubleProperty<Transaction>(_entities[3].properties[1]);

  /// See [Transaction.type].
  static final type =
      obx.QueryStringProperty<Transaction>(_entities[3].properties[2]);

  /// See [Transaction.date].
  static final date =
      obx.QueryDateProperty<Transaction>(_entities[3].properties[3]);

  /// See [Transaction.description].
  static final description =
      obx.QueryStringProperty<Transaction>(_entities[3].properties[4]);

  /// See [Transaction.category].
  static final category =
      obx.QueryRelationToOne<Transaction, Category>(_entities[3].properties[5]);

  /// See [Transaction.account].
  static final account = obx.QueryRelationToOne<Transaction, UserAccount>(
      _entities[3].properties[6]);
}

/// [UserAccount] entity fields to define ObjectBox queries.
class UserAccount_ {
  /// See [UserAccount.id].
  static final id =
      obx.QueryIntegerProperty<UserAccount>(_entities[4].properties[0]);

  /// See [UserAccount.name].
  static final name =
      obx.QueryStringProperty<UserAccount>(_entities[4].properties[1]);

  /// See [UserAccount.balance].
  static final balance =
      obx.QueryDoubleProperty<UserAccount>(_entities[4].properties[2]);

  /// See [UserAccount.currency].
  static final currency =
      obx.QueryStringProperty<UserAccount>(_entities[4].properties[3]);

  /// See [UserAccount.userModel].
  static final userModel = obx.QueryRelationToOne<UserAccount, UserModel>(
      _entities[4].properties[4]);

  /// see [UserAccount.transactions]
  static final transactions =
      obx.QueryBacklinkToMany<Transaction, UserAccount>(Transaction_.account);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// See [UserModel.id].
  static final id =
      obx.QueryIntegerProperty<UserModel>(_entities[5].properties[0]);

  /// See [UserModel.name].
  static final name =
      obx.QueryStringProperty<UserModel>(_entities[5].properties[1]);

  /// See [UserModel.email].
  static final email =
      obx.QueryStringProperty<UserModel>(_entities[5].properties[2]);

  /// See [UserModel.profileImgUrl].
  static final profileImgUrl =
      obx.QueryStringProperty<UserModel>(_entities[5].properties[3]);

  /// See [UserModel.budget].
  static final budget =
      obx.QueryRelationToOne<UserModel, Budget>(_entities[5].properties[4]);

  /// see [UserModel.accounts]
  static final accounts =
      obx.QueryBacklinkToMany<UserAccount, UserModel>(UserAccount_.userModel);

  /// see [UserModel.savingsGoals]
  static final savingsGoals =
      obx.QueryBacklinkToMany<SavingsGoal, UserModel>(SavingsGoal_.userModel);

  /// see [UserModel.incomes]
  static final incomes =
      obx.QueryBacklinkToMany<Income, UserModel>(Income_.userModel);
}

/// [Income] entity fields to define ObjectBox queries.
class Income_ {
  /// See [Income.id].
  static final id =
      obx.QueryIntegerProperty<Income>(_entities[6].properties[0]);

  /// See [Income.name].
  static final name =
      obx.QueryStringProperty<Income>(_entities[6].properties[1]);

  /// See [Income.amount].
  static final amount =
      obx.QueryDoubleProperty<Income>(_entities[6].properties[2]);

  /// See [Income.incomeRepitionType].
  static final incomeRepitionType =
      obx.QueryStringProperty<Income>(_entities[6].properties[3]);

  /// See [Income.userModel].
  static final userModel =
      obx.QueryRelationToOne<Income, UserModel>(_entities[6].properties[4]);
}
